const { Scenes, Telegraf, session, Markup } = require('telegraf');
require('dotenv').config()
const { enter, leave } = Scenes.Stage;
// SCENES

const admunacc = new Scenes.BaseScene("admunacc");

admunacc.enter(async ctx => {
    try {
        await ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:')
    }catch(e) { 
        console.error(e);
    }
})

let admunaccmsg;
let admmsg;
admunacc.on('message', async ctx => {
    try {
        admmsg = ctx.message.text
        admunaccmsg = await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–∏—á–∏–Ω—É?:\n<i>${ctx.message.text}</i>`, Markup.inlineKeyboard([
            [Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã', 'rewrite'), Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
            [Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'send')]
        ]))
        // await ctx.tg.sendMessage(anontrueid.anonchat, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n');
    }catch(e) {
        console.error(e);
    }
}) 

admunacc.action('cancel', async ctx => {
    try {
        await ctx.tg.deleteMessage(ctx.chat.id, admunaccmsg.message_id)
        await ctx.answerCbQuery('–û–∫–µ–π...')
        await ctx.scene.leave('admunacc')
    }catch(e) {
        console.error(e);
    }
})
admunacc.action('send', async ctx => {
    try {
        await ctx.tg.deleteMessage(ctx.chat.id, admunaccmsg.message_id);
        let anoncounun = await collection.findOne({_id: ObjectId('63612b27b24e538f644ad357')});
        let rs = await anoncounun.anonim_message_count - 1;
        await collection.findOneAndUpdate({_id: ObjectId('63612b27b24e538f644ad357')}, {$set: {anonim_message_count: rs}});
        await collection.deleteOne({anonId: anontrueid.anonId});
        await ctx.tg.deleteMessage(ctx.chat.id, admquiz.message_id);
        await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–ª—è—é...');
        await ctx.tg.sendMessage(anontrueid.anonchat, `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n<b>${admmsg}</b>`, {parse_mode: "HTML"});
        await ctx.scene.leave("admunacc")
    }catch(e) {
        console.error(e);
    }
})
admunacc.action('rewrite', async ctx => {
    try {
        await ctx.tg.deleteMessage(ctx.chat.id, admunaccmsg.message_id)
        await ctx.answerCbQuery('–û–∫–µ–π...')
        ctx.scene.enter('admunacc')
    }catch(e) {
        console.error(e);
    }
})
    

// SCENES

const bot = new Telegraf(process.env.BOT_TOKEN);
const { MongoClient, ObjectId } = require('mongodb');
const url = process.env.DB;
const client = new MongoClient(url);
client.connect();
const db = client.db('bot');
const collection = db.collection('anonim_messages');
const stage = new Scenes.Stage([admunacc]);  
bot.use(session()); 
bot.use(stage.middleware()); 

bot.start((ctx) => ctx.replyWithHTML('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –ê–Ω–æ–Ω–∏–º!\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ <a href="https://t.me/cicanonymous">–∫–∞–Ω–∞–ª</a> —Å–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –∏–ª–∏ –ø–æ—Å–ª–∞–Ω–∏—è –∏ –Ω–∏–∫—Ç–æ –æ–± —ç—Ç–æ–º –Ω–µ —É–∑–Ω–∞–µ—Ç ü•¥\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –∂–µ–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ <a href="https://t.me/cicanonymous">–∫–∞–Ω–∞–ª</a> <b>–∞–Ω–æ–Ω–∏–º–Ω–æ</b>!', {disable_web_page_preview: true}));
bot.help((ctx) => ctx.replyWithHTML('–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –∂–µ–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ <a href="https://t.me/cicanonymous">–∫–∞–Ω–∞–ª</a> <b>–∞–Ω–æ–Ω–∏–º–Ω–æ</b>!', {disable_web_page_preview: true}));
bot.launch({dropPendingUpdates: true});

// 933981477

let admquiz;
let anontrueid;
bot.on("text", async ctx => {
    try {
        if(ctx.chat.id == '933981477') {
            /* '5103314362' */
            let anonid = await collection.findOne({anonId: ctx.message.text});
            if(anonid == null) {
                await ctx.reply(`–Ø –Ω–µ –Ω–∞—à–µ–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω–æ–µ ID: ${ctx.message.text}`)
            }else {
                admquiz = await ctx.replyWithHTML(`–ü–æ id: <i>${ctx.message.text}</i> –Ω–∞–π–¥–µ–Ω–æ:\n${anonid.user_anonmsg}`, Markup.inlineKeyboard(
                    [
                        [Markup.button.callback('–û–¥–æ–±—Ä–∏—Ç—å', 'acc'), Markup.button.callback('–û—Ç–∫–∞–∑–∞—Ç—å', 'unacc')],
                        [Markup.button.callback('–î–∞–Ω–Ω—ã–µ –ê–Ω–æ–Ω–∏–º–∞', 'watch')]
                    ]
                ))
                anontrueid = await collection.findOne({anonId: ctx.message.text});
            }
        }else {
            let request = await collection.findOne({user_id: ctx.message.from.id});
            if(request == null) {
                let count = await collection.findOne({_id: ObjectId('63612b27b24e538f644ad357')})
                let result = await count.anonim_message_count + 1;
                let quat = await ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n<i>${ctx.message.text}</i>`, Markup.inlineKeyboard(
                    [
                        [Markup.button.callback('–î–∞, —É–≤–µ—Ä–µ–Ω', 'yes'), Markup.button.callback('–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', 'no')]
                    ]
                ))
                await collection.insertOne(
                    {
                        user_id: ctx.message.from.id,
                        user_name: ctx.message.from.username,
                        user_firstname: ctx.message.from.first_name,
                        user_anonmsg: ctx.message.text,
                        quiz_markup: `${quat.message_id}`,
                        anonId: `#${result}`,
                        anonchat: ctx.chat.id
                    }
                )   
                await collection.findOneAndUpdate({_id: ObjectId('63612b27b24e538f644ad357')}, {$set: {anonim_message_count: result}});
            }else {
                await ctx.reply('–û–∂–∏–¥–∞–π—Ç–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
            }
        }
    }catch(e) {
        console.error(e);
    }   
    // -1001514376747
})


bot.action("watch", async ctx => {
    try {
        await ctx.replyWithHTML(`–î–∞–Ω–Ω—ã–µ –ê–Ω–æ–Ω–∏–º–∞:\n\nFirst Name: <a href="tg://user?id=${anontrueid.user_id}">${anontrueid.user_firstname}</a>\nUser Name: @${anontrueid.user_name}`)
        await ctx.answerCbQuery('–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–µ–¥—ã..');
    }catch(e){
        console.error(e);
    }  
})

bot.action('acc', async ctx => {  
    try {
        await ctx.tg.deleteMessage(ctx.chat.id, admquiz.message_id);  
        let anoncouna = await collection.findOne({_id: ObjectId('6363c74b38cbdb91eef0e1d4')})
        let restot = await anoncouna.anonim_message_countres + 1;
        await collection.findOneAndUpdate({_id: ObjectId('6363c74b38cbdb91eef0e1d4')}, {$set: {anonim_message_countres: restot}})
        await ctx.tg.sendMessage(-1001514376747, `üë§ –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #${restot}:\n\n${anontrueid.user_anonmsg}`);
        await ctx.tg.sendMessage(anontrueid.anonchat, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É!');
        await collection.findOneAndDelete({user_id: anontrueid.user_id})
        await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }catch(e){
        console.error(e);
    }
})


bot.action('unacc', async ctx => {
    try {
        await ctx.answerCbQuery('–í—ã–ø–æ–ª–Ω–µ–Ω–æ', {show_alert: false})
        await ctx.scene.enter('admunacc')
    }catch(e){
        console.error(e);
    }
})
  



bot.action('yes', async ctx => {
    try {
        let anonserch = await collection.findOne({user_id: ctx.callbackQuery.from.id});
        await ctx.tg.sendMessage(933981477, `–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${anonserch.anonId}\n\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è(#00000)`);
        await ctx.tg.deleteMessage(ctx.chat.id, anonserch.quiz_markup);
        await ctx.answerCbQuery('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {show_alert: false})
    }catch(e){
        console.error(e);
    }
})


bot.action('no', async ctx => {
    try {
        let anonserchn = await collection.findOne({user_id: ctx.callbackQuery.from.id});
        await ctx.tg.deleteMessage(ctx.chat.id, anonserchn.quiz_markup);
        let anoncoun = await collection.findOne({_id: ObjectId('63612b27b24e538f644ad357')});
        let res = await anoncoun.anonim_message_count - 1 ;
        await collection.deleteOne({user_id: ctx.callbackQuery.from.id});
        await collection.findOneAndUpdate({_id: ObjectId('63612b27b24e538f644ad357')}, {$set: {anonim_message_count: res}});
        await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ')
    }catch(e){
        console.error(e);
    }
})




// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));